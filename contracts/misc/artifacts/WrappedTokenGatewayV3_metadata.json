{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "weth",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "contract IPool",
						"name": "pool",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"stateMutability": "payable",
				"type": "fallback"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "interestRateMode",
						"type": "uint256"
					},
					{
						"internalType": "uint16",
						"name": "referralCode",
						"type": "uint16"
					}
				],
				"name": "borrowETH",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "onBehalfOf",
						"type": "address"
					},
					{
						"internalType": "uint16",
						"name": "referralCode",
						"type": "uint16"
					}
				],
				"name": "depositETH",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "emergencyEtherTransfer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "token",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "emergencyTokenTransfer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getWETHAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "rateMode",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "onBehalfOf",
						"type": "address"
					}
				],
				"name": "repayETH",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					}
				],
				"name": "withdrawETH",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "deadline",
						"type": "uint256"
					},
					{
						"internalType": "uint8",
						"name": "permitV",
						"type": "uint8"
					},
					{
						"internalType": "bytes32",
						"name": "permitR",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "permitS",
						"type": "bytes32"
					}
				],
				"name": "withdrawETHWithPermit",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"stateMutability": "payable",
				"type": "receive"
			}
		],
		"devdoc": {
			"details": "This contract is an upgrade of the WrappedTokenGatewayV3 contract, with immutable pool address. This contract keeps the same interface of the deprecated WrappedTokenGatewayV3 contract.",
			"kind": "dev",
			"methods": {
				"borrowETH(address,uint256,uint256,uint16)": {
					"details": "borrow WETH, unwraps to ETH and send both the ETH and DebtTokens to msg.sender, via `approveDelegation` and onBehalf argument in `Pool.borrow`.",
					"params": {
						"amount": "the amount of ETH to borrow",
						"interestRateMode": "the interest rate mode",
						"referralCode": "integrators are assigned a referral code and can potentially receive rewards"
					}
				},
				"constructor": {
					"details": "Sets the WETH address and the PoolAddressesProvider address. Infinite approves pool.",
					"params": {
						"owner": "Address of the owner of this contract*",
						"weth": "Address of the Wrapped Ether contract"
					}
				},
				"depositETH(address,address,uint16)": {
					"details": "deposits WETH into the reserve, using native ETH. A corresponding amount of the overlying asset (aTokens) is minted.",
					"params": {
						"onBehalfOf": "address of the user who will receive the aTokens representing the deposit",
						"referralCode": "integrators are assigned a referral code and can potentially receive rewards.*"
					}
				},
				"emergencyEtherTransfer(address,uint256)": {
					"details": "transfer native Ether from the utility contract, for native Ether recovery in case of stuck Ether due to selfdestructs or ether transfers to the pre-computed contract address before deployment.",
					"params": {
						"amount": "amount to send",
						"to": "recipient of the transfer"
					}
				},
				"emergencyTokenTransfer(address,address,uint256)": {
					"details": "transfer ERC20 from the utility contract, for ERC20 recovery in case of stuck tokens due direct transfers to the contract address.",
					"params": {
						"amount": "amount to send",
						"to": "recipient of the transfer",
						"token": "token to transfer"
					}
				},
				"getWETHAddress()": {
					"details": "Get WETH address used by WrappedTokenGatewayV3"
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"repayETH(address,uint256,uint256,address)": {
					"details": "repays a borrow on the WETH reserve, for the specified amount (or for the whole amount, if uint256(-1) is specified).",
					"params": {
						"amount": "the amount to repay, or uint256(-1) if the user wants to repay everything",
						"onBehalfOf": "the address for which msg.sender is repaying",
						"rateMode": "the rate mode to repay"
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"withdrawETH(address,uint256,address)": {
					"details": "withdraws the WETH _reserves of msg.sender.",
					"params": {
						"amount": "amount of aWETH to withdraw and receive native ETH",
						"to": "address of the user who will receive native ETH"
					}
				},
				"withdrawETHWithPermit(address,uint256,address,uint256,uint8,bytes32,bytes32)": {
					"details": "withdraws the WETH _reserves of msg.sender.",
					"params": {
						"amount": "amount of aWETH to withdraw and receive native ETH",
						"deadline": "validity deadline of permit and so depositWithPermit signature",
						"permitR": "R parameter of ERC712 permit sig",
						"permitS": "S parameter of ERC712 permit sig",
						"permitV": "V parameter of ERC712 permit sig",
						"to": "address of the user who will receive native ETH"
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/misc/WrappedTokenGatewayV3.sol": "WrappedTokenGatewayV3"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@aave/core-v3/contracts/dependencies/gnosis/contracts/GPv2SafeERC20.sol": {
			"keccak256": "0xb18337187a2a6c4e64c61f8e4e06f0e932a69bb8f33688943bf50d7f4198e44b",
			"license": "LGPL-3.0-or-later",
			"urls": [
				"bzz-raw://38c0769720d226d41fb5a0f504a0b9434ca266acb15d1de9bbc08f1a5c8a7bbc",
				"dweb:/ipfs/QmeskcXDL7cbMXbjEdAdbUamKmjqYKBwRfheFZmm9mpBKJ"
			]
		},
		"@aave/core-v3/contracts/dependencies/openzeppelin/contracts/Context.sol": {
			"keccak256": "0xc0df5ebb2c3d8b4509464c40a88cc51e5e5f5e4a26fafc909330e9bb2658f641",
			"license": "MIT",
			"urls": [
				"bzz-raw://dc2690f871399de8f14e4cd8ae9b57a67e135afa28ac4be76594eaf4ecd8e244",
				"dweb:/ipfs/Qmb9gKAnQBciUknb3ysnfDpWAdYXGJm51NzFYWNkXwoAZg"
			]
		},
		"@aave/core-v3/contracts/dependencies/openzeppelin/contracts/IERC20.sol": {
			"keccak256": "0xf57d62241e553696a1324d225663ba2e1a51db0a51ca236d0c1b009d89b6284c",
			"license": "AGPL-3.0",
			"urls": [
				"bzz-raw://d327db93b636790909aa137124f30a856ac1631cb79c476aa188f9627fda8d03",
				"dweb:/ipfs/QmaxpmEoBFioeNYmpxJemyZ7aYF2nX1NKW1XDqREm7i6es"
			]
		},
		"@aave/core-v3/contracts/dependencies/openzeppelin/contracts/Ownable.sol": {
			"keccak256": "0x3ce185c4f579e32006f8893dbfdc1b5d878c0e2cafd1508f7ceb081698bc81f9",
			"license": "MIT",
			"urls": [
				"bzz-raw://de40129c2380570ce2e883210452f0dc0913788e66be6690084be3d9f8def73f",
				"dweb:/ipfs/QmVAEtQHTYDPheoDniWaVNyRcWwfu3ccmUCxFXuzxHEwFT"
			]
		},
		"@aave/core-v3/contracts/interfaces/IAToken.sol": {
			"keccak256": "0x4ec2e3180174f248c9308e03fa837d44ca91ca6c1ad67c9951a2951d46948417",
			"license": "AGPL-3.0",
			"urls": [
				"bzz-raw://764b8e56a62c7277efdd6dc29e1ce3f88cb997613a3142a79effa5b3d908a3fa",
				"dweb:/ipfs/QmWAF7rDjyVqkwDR6RGRwYvB3V2fe3T7G1ZSC9UuHjAAZf"
			]
		},
		"@aave/core-v3/contracts/interfaces/IAaveIncentivesController.sol": {
			"keccak256": "0x906b896fdcb878d1472f740a70680f26e9a601dc28701113ab1f89cd9edce0bd",
			"license": "AGPL-3.0",
			"urls": [
				"bzz-raw://b17473265a3ec2ec73dac797e0e60c147590f4e5cc7016f8eb61efbe072c49e0",
				"dweb:/ipfs/QmchQGeuyUw3VW4Kgwfg5Ys9ky1F7Q6QCcKbywbRaEUPt7"
			]
		},
		"@aave/core-v3/contracts/interfaces/IInitializableAToken.sol": {
			"keccak256": "0xb7c0da4c50ab10ce00e2325e649297923497738350092f64ef4b259307039dee",
			"license": "AGPL-3.0",
			"urls": [
				"bzz-raw://67af6435a258e6d08151b0c37884475e040c2939c76cfb0ba7afd6264c45be87",
				"dweb:/ipfs/Qmf5wup15foyfWrGvhiZDyasJn9XZFn4Vs14Dui9smeLa3"
			]
		},
		"@aave/core-v3/contracts/interfaces/IPool.sol": {
			"keccak256": "0xbfd2077251c8dc766a56d45f4b03eb07f3441323e79c0f794efea3657a99747f",
			"license": "AGPL-3.0",
			"urls": [
				"bzz-raw://c6ff6221de0ea877932c73c0b99d3e4535f293053ae44f9f9d6b9d265e9af2f6",
				"dweb:/ipfs/QmSTaEKrhz1xNVnx4oBzWw8DenYPShVzJoP1A9GTEWkAzX"
			]
		},
		"@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol": {
			"keccak256": "0x33d4308d9407b4ee2297fc4ba5acce1a96a6c658189e2778a4f6b90e032fb3b5",
			"license": "AGPL-3.0",
			"urls": [
				"bzz-raw://978336a2a40229ccc7749344be890862ea12e17e9fffe5bb977ba3841de07b5a",
				"dweb:/ipfs/QmScNrQfDSPg1afJmkCty6fZkETUrWTmEXWeTmHoe7mSqa"
			]
		},
		"@aave/core-v3/contracts/interfaces/IScaledBalanceToken.sol": {
			"keccak256": "0x72b3ea433cd3386f369f1643a154bf233ec60c02acd02c32088a97556207d2e4",
			"license": "AGPL-3.0",
			"urls": [
				"bzz-raw://a5907c61cf65126001feebd94c7a869eff95045106d97e21bf7f0d3de22caf9d",
				"dweb:/ipfs/QmPARkA7YpsBtd1F3JgszZREJk6TAkqRLBkjWZUadCu3sM"
			]
		},
		"@aave/core-v3/contracts/misc/interfaces/IWETH.sol": {
			"keccak256": "0x77edc81addcbe1acef487437e6a4d83369d6f09fd40e6fdbdd967cc16a9fb94c",
			"license": "AGPL-3.0",
			"urls": [
				"bzz-raw://557eb552b7d334ebe97191574bd0b15d1804122268cf55933581e34496b578a4",
				"dweb:/ipfs/QmZrQ8WXv6ZVXst1k46q649kuLR6ydA1pwwwK2r5Qw6Pzr"
			]
		},
		"@aave/core-v3/contracts/protocol/libraries/configuration/ReserveConfiguration.sol": {
			"keccak256": "0x5ba6b452f71aecd929c4cdc1f812f42ea45b1898e9eb8a8b03596584d4385e4f",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://d2520f2b66a68a18ccb69743349c5e869730e60f7bf2335d8814dcde6d217b1f",
				"dweb:/ipfs/QmSuSsqifKxC57M7xyi1db6UUxwcNWLEoN9R64WQxTT3CQ"
			]
		},
		"@aave/core-v3/contracts/protocol/libraries/configuration/UserConfiguration.sol": {
			"keccak256": "0x12ec944eb9a941ae5fe9842192f47328df99375d589cfd9a11d6bb54f868a456",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://8a948c40660bfe08f8683bee04796ae2ce876d12237318c1142b5223ce6b164a",
				"dweb:/ipfs/QmYoyHPqTLLGQgVULeNrpgrN18WVVwtAd8qsozMfQRuv4B"
			]
		},
		"@aave/core-v3/contracts/protocol/libraries/helpers/Errors.sol": {
			"keccak256": "0x61757945ed506349f2cec8b99806124ef17f70644faba9860fb134df8ca34e86",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://a405589e8bb12568d3d4dbf936bcf40c43964170f3bbf380483e9df4d73f2cf7",
				"dweb:/ipfs/QmXCtAp2iom96rZnQWGDehxuPszgn6SMuB3mJcHzCq9uwx"
			]
		},
		"@aave/core-v3/contracts/protocol/libraries/types/DataTypes.sol": {
			"keccak256": "0x771cb99fd8519c974f7e12130387c4d9a997a6e8d0ac10e4303b842fe53efa88",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://0f41689d1d58bc13678c749bae8830f5a8b19b89cd135e962bf07d483350f828",
				"dweb:/ipfs/QmQSNGDxjYGqT1GU2CZzsWUTNcAtcfkg1jDGTH516nCAfN"
			]
		},
		"contracts/libraries/DataTypesHelper.sol": {
			"keccak256": "0xf30eeb28f5d4eb86f6786842604e6405b0dca383286c94f4d83a72f3a141fb69",
			"license": "AGPL-3.0",
			"urls": [
				"bzz-raw://701982204b681779263750449210c84dde008e4ef7e3d8ed867442240a6027eb",
				"dweb:/ipfs/QmTvBjVowfDx34dZDuXiBATeon4T1SozPZSTRkw69rYRRc"
			]
		},
		"contracts/misc/WrappedTokenGatewayV3.sol": {
			"keccak256": "0x54d5d53f350d50b7fbfcf8eacb9ee6013fbed3b32fb1cc772982774de116093b",
			"license": "AGPL-3.0",
			"urls": [
				"bzz-raw://5d1a281f1c6872dc3e97d9a45621c67191aa15def3849705228925fef58b0f9b",
				"dweb:/ipfs/QmcjZDsQj9V9ruzALVYnHWx5BrbiafKCF5EDBnBA6RyvgX"
			]
		},
		"contracts/misc/interfaces/IWrappedTokenGatewayV3.sol": {
			"keccak256": "0x0f23f4eaa7b24953829a48b1186b02c7f7064f112f5931d6f882ecfa3cfd5795",
			"license": "AGPL-3.0",
			"urls": [
				"bzz-raw://8112caf05db5cfe3ca182b8f33dac04b2ef5824f79156fdf0dd8fd18009da4c1",
				"dweb:/ipfs/QmecT6ALbtg1K1LvWCtNpzvZfofeoBLSH3nj7CvZQ3ZyyR"
			]
		}
	},
	"version": 1
}